// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Demonstration of flutter calling rust functions
class FlutterRustBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void create_vnt(
    ffi.Pointer<ffi.Char> secret,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> server,
  ) {
    return _create_vnt(
      secret,
      name,
      server,
    );
  }

  late final _create_vntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('create_vnt');
  late final _create_vnt = _create_vntPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void hello_world() {
    return _hello_world();
  }

  late final _hello_worldPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('hello_world');
  late final _hello_world = _hello_worldPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> local_ip() {
    return _local_ip();
  }

  late final _local_ipPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('local_ip');
  late final _local_ip =
      _local_ipPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> md5(
    ffi.Pointer<ffi.Char> data,
  ) {
    return _md5(
      data,
    );
  }

  late final _md5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('md5');
  late final _md5 = _md5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> server_list() {
    return _server_list();
  }

  late final _server_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'server_list');
  late final _server_list =
      _server_listPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void stop() {
    return _stop();
  }

  late final _stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('stop');
  late final _stop = _stopPtr.asFunction<void Function()>();
}
